For the emulator to interperet the opcodes a lookup table will be generated.
A (hopefully) small program will be written that will generate a lookup table.

This struct represents each entry in the lookup table
The struct contains:
- a function pointer that will be called with value1 and value2 as parameters
- a void pointer to value1
- a void pointer to value2
- value1 and value2 can be set to NULL if a function does not need a parameter

    struct Instruction_struct {
	    void(*Instruction)(void *value1, void* value2);
	    void *value1;
	    void *value2;
    };

The LookupTable contain a list off every single instruction coresponding to each opcode
The instruction and parameters will be selected from the tables depicted in OpcodeTranslationTable.docx

	struct Instruction_struct LookupTable[AMOUNT_OF_OPCODES] = {
		{ _8bitADDliteral, &REG_A, &REG_B },
        { _8bitADDliteral, &REG_A, &REG_C },
        { _16bitADDliteral, &REG_BC, &REG_AF },
        { test, NULL, NULL },
        .
        .
        .
	};

The function for each opcode can be called through something like:
    LookupTable[OPCODE].Instruction(LookupTable[OPCODE].value1, LookupTable[OPCODE].value2);

This lookuptable will allow for quick execution at the cost of some memory
This lookuptalbe also allows for easier reuse of different functions.

The program that will generate this lookuptable will run through the table in OpcodeTranslationTable.docx
for each opcode.
and will add an entry to the lookuptable from opcodes 0 to n, where n is the final opcode.

Opcodes now get spit out,

CB prefixed opcodes will use a different struct
struct CB_Instruction_struct {
    void(*Instruction)(unsigned char value, void* register)
    unsigned char value
    void* register
}

TODO:
things to look into:
    - Do similar functions like "ADD A, B" and "ADD A, r8" use the same function call,
    or does a seperate functions have to be created because r8 has to be read from memory?
    >no probably not, because first of all the ammount of clock cycles wouldn't match up propperly as "ADD A, B" takes 4 clock cycles
    and "ADD A, r8" requires 8 clock cycles. this however can still easily be done with matching cycles
    first calling a load to read the immediate data into a temporary variable, and then preforming the normal addition.
    
    - probably some other stuff to lookinto as well before we get started...

    - also, the registers in parenthesies eg. (BC) need to be handled
    - and the registers need to be propperly named